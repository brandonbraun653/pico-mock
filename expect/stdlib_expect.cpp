/*
 * This file has been auto-generated by CppUMockGen v0.6.
 *
 * Contents will NOT be preserved if it is regenerated!!!
 */

#include "stdlib_expect.hpp"

namespace expect {
MockExpectedCall& setup_default_uart()
{
    return setup_default_uart(1);
}
MockExpectedCall& setup_default_uart(unsigned int __numCalls__)
{
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "setup_default_uart");
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& set_sys_clock_48mhz()
{
    return set_sys_clock_48mhz(1);
}
MockExpectedCall& set_sys_clock_48mhz(unsigned int __numCalls__)
{
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "set_sys_clock_48mhz");
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& set_sys_clock_pll(CppUMockGen::Parameter<uint32_t> vco_freq, CppUMockGen::Parameter<uint> post_div1, CppUMockGen::Parameter<uint> post_div2)
{
    return set_sys_clock_pll(1, vco_freq, post_div1, post_div2);
}
MockExpectedCall& set_sys_clock_pll(unsigned int __numCalls__, CppUMockGen::Parameter<uint32_t> vco_freq, CppUMockGen::Parameter<uint> post_div1, CppUMockGen::Parameter<uint> post_div2)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "set_sys_clock_pll");
    if(vco_freq.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("vco_freq", vco_freq.getValue()); }
    if(post_div1.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("post_div1", post_div1.getValue()); }
    if(post_div2.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("post_div2", post_div2.getValue()); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& check_sys_clock_khz(CppUMockGen::Parameter<uint32_t> freq_khz, uint * vco_freq_out, size_t __sizeof_vco_freq_out, uint * post_div1_out, size_t __sizeof_post_div1_out, uint * post_div2_out, size_t __sizeof_post_div2_out, _Bool __return__)
{
    return check_sys_clock_khz(1, freq_khz, vco_freq_out, __sizeof_vco_freq_out, post_div1_out, __sizeof_post_div1_out, post_div2_out, __sizeof_post_div2_out, __return__);
}
MockExpectedCall& check_sys_clock_khz(unsigned int __numCalls__, CppUMockGen::Parameter<uint32_t> freq_khz, uint * vco_freq_out, size_t __sizeof_vco_freq_out, uint * post_div1_out, size_t __sizeof_post_div1_out, uint * post_div2_out, size_t __sizeof_post_div2_out, _Bool __return__)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "check_sys_clock_khz");
    if(freq_khz.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("freq_khz", freq_khz.getValue()); }
    __expectedCall__.withOutputParameterReturning("vco_freq_out", vco_freq_out, __sizeof_vco_freq_out);
    __expectedCall__.withOutputParameterReturning("post_div1_out", post_div1_out, __sizeof_post_div1_out);
    __expectedCall__.withOutputParameterReturning("post_div2_out", post_div2_out, __sizeof_post_div2_out);
    __expectedCall__.andReturnValue(__return__);
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& set_sys_clock_khz(CppUMockGen::Parameter<uint32_t> freq_khz, CppUMockGen::Parameter<_Bool> required, _Bool __return__)
{
    return set_sys_clock_khz(1, freq_khz, required, __return__);
}
MockExpectedCall& set_sys_clock_khz(unsigned int __numCalls__, CppUMockGen::Parameter<uint32_t> freq_khz, CppUMockGen::Parameter<_Bool> required, _Bool __return__)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "set_sys_clock_khz");
    if(freq_khz.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("freq_khz", freq_khz.getValue()); }
    if(required.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withBoolParameter("required", required.getValue()); }
    __expectedCall__.andReturnValue(__return__);
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

