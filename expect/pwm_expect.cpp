/*
 * This file has been auto-generated by CppUMockGen v0.6.
 *
 * Contents will NOT be preserved if it is regenerated!!!
 */

#include "pwm_expect.hpp"

namespace expect {
MockExpectedCall& pwm_set_irq_enabled(CppUMockGen::Parameter<uint> slice_num, CppUMockGen::Parameter<_Bool> enabled)
{
    return pwm_set_irq_enabled(1, slice_num, enabled);
}
MockExpectedCall& pwm_set_irq_enabled(unsigned int __numCalls__, CppUMockGen::Parameter<uint> slice_num, CppUMockGen::Parameter<_Bool> enabled)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "pwm_set_irq_enabled");
    if(slice_num.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("slice_num", slice_num.getValue()); }
    if(enabled.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withBoolParameter("enabled", enabled.getValue()); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& pwm_set_irq_mask_enabled(CppUMockGen::Parameter<uint32_t> slice_mask, CppUMockGen::Parameter<_Bool> enabled)
{
    return pwm_set_irq_mask_enabled(1, slice_mask, enabled);
}
MockExpectedCall& pwm_set_irq_mask_enabled(unsigned int __numCalls__, CppUMockGen::Parameter<uint32_t> slice_mask, CppUMockGen::Parameter<_Bool> enabled)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "pwm_set_irq_mask_enabled");
    if(slice_mask.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("slice_mask", slice_mask.getValue()); }
    if(enabled.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withBoolParameter("enabled", enabled.getValue()); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& pwm_clear_irq(CppUMockGen::Parameter<uint> slice_num)
{
    return pwm_clear_irq(1, slice_num);
}
MockExpectedCall& pwm_clear_irq(unsigned int __numCalls__, CppUMockGen::Parameter<uint> slice_num)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "pwm_clear_irq");
    if(slice_num.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("slice_num", slice_num.getValue()); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& pwm_get_irq_status_mask(uint32_t __return__)
{
    return pwm_get_irq_status_mask(1, __return__);
}
MockExpectedCall& pwm_get_irq_status_mask(unsigned int __numCalls__, uint32_t __return__)
{
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "pwm_get_irq_status_mask");
    __expectedCall__.andReturnValue(static_cast<unsigned int>(__return__));
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& pwm_force_irq(CppUMockGen::Parameter<uint> slice_num)
{
    return pwm_force_irq(1, slice_num);
}
MockExpectedCall& pwm_force_irq(unsigned int __numCalls__, CppUMockGen::Parameter<uint> slice_num)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "pwm_force_irq");
    if(slice_num.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("slice_num", slice_num.getValue()); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& pwm_get_dreq(CppUMockGen::Parameter<uint> slice_num, uint __return__)
{
    return pwm_get_dreq(1, slice_num, __return__);
}
MockExpectedCall& pwm_get_dreq(unsigned int __numCalls__, CppUMockGen::Parameter<uint> slice_num, uint __return__)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "pwm_get_dreq");
    if(slice_num.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("slice_num", slice_num.getValue()); }
    __expectedCall__.andReturnValue(static_cast<unsigned int>(__return__));
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

