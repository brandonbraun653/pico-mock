/*
 * This file has been auto-generated by CppUMockGen v0.6.
 *
 * Contents will NOT be preserved if it is regenerated!!!
 */

#include "gpio_expect.hpp"

namespace expect {
MockExpectedCall& gpio_set_function(CppUMockGen::Parameter<uint> gpio, CppUMockGen::Parameter<enum gpio_function> fn)
{
    return gpio_set_function(1, gpio, fn);
}
MockExpectedCall& gpio_set_function(unsigned int __numCalls__, CppUMockGen::Parameter<uint> gpio, CppUMockGen::Parameter<enum gpio_function> fn)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "gpio_set_function");
    if(gpio.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("gpio", gpio.getValue()); }
    if(fn.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withIntParameter("fn", static_cast<int>(fn.getValue())); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& gpio_get_function(CppUMockGen::Parameter<uint> gpio, enum gpio_function __return__)
{
    return gpio_get_function(1, gpio, __return__);
}
MockExpectedCall& gpio_get_function(unsigned int __numCalls__, CppUMockGen::Parameter<uint> gpio, enum gpio_function __return__)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "gpio_get_function");
    if(gpio.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("gpio", gpio.getValue()); }
    __expectedCall__.andReturnValue(static_cast<int>(__return__));
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& gpio_pull_up(CppUMockGen::Parameter<uint> gpio)
{
    return gpio_pull_up(1, gpio);
}
MockExpectedCall& gpio_pull_up(unsigned int __numCalls__, CppUMockGen::Parameter<uint> gpio)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "gpio_pull_up");
    if(gpio.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("gpio", gpio.getValue()); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& gpio_pull_down(CppUMockGen::Parameter<uint> gpio)
{
    return gpio_pull_down(1, gpio);
}
MockExpectedCall& gpio_pull_down(unsigned int __numCalls__, CppUMockGen::Parameter<uint> gpio)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "gpio_pull_down");
    if(gpio.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("gpio", gpio.getValue()); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& gpio_disable_pulls(CppUMockGen::Parameter<uint> gpio)
{
    return gpio_disable_pulls(1, gpio);
}
MockExpectedCall& gpio_disable_pulls(unsigned int __numCalls__, CppUMockGen::Parameter<uint> gpio)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "gpio_disable_pulls");
    if(gpio.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("gpio", gpio.getValue()); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& gpio_set_pulls(CppUMockGen::Parameter<uint> gpio, CppUMockGen::Parameter<_Bool> up, CppUMockGen::Parameter<_Bool> down)
{
    return gpio_set_pulls(1, gpio, up, down);
}
MockExpectedCall& gpio_set_pulls(unsigned int __numCalls__, CppUMockGen::Parameter<uint> gpio, CppUMockGen::Parameter<_Bool> up, CppUMockGen::Parameter<_Bool> down)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "gpio_set_pulls");
    if(gpio.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("gpio", gpio.getValue()); }
    if(up.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withBoolParameter("up", up.getValue()); }
    if(down.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withBoolParameter("down", down.getValue()); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& gpio_set_irqover(CppUMockGen::Parameter<uint> gpio, CppUMockGen::Parameter<uint> value)
{
    return gpio_set_irqover(1, gpio, value);
}
MockExpectedCall& gpio_set_irqover(unsigned int __numCalls__, CppUMockGen::Parameter<uint> gpio, CppUMockGen::Parameter<uint> value)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "gpio_set_irqover");
    if(gpio.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("gpio", gpio.getValue()); }
    if(value.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("value", value.getValue()); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& gpio_set_outover(CppUMockGen::Parameter<uint> gpio, CppUMockGen::Parameter<uint> value)
{
    return gpio_set_outover(1, gpio, value);
}
MockExpectedCall& gpio_set_outover(unsigned int __numCalls__, CppUMockGen::Parameter<uint> gpio, CppUMockGen::Parameter<uint> value)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "gpio_set_outover");
    if(gpio.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("gpio", gpio.getValue()); }
    if(value.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("value", value.getValue()); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& gpio_set_inover(CppUMockGen::Parameter<uint> gpio, CppUMockGen::Parameter<uint> value)
{
    return gpio_set_inover(1, gpio, value);
}
MockExpectedCall& gpio_set_inover(unsigned int __numCalls__, CppUMockGen::Parameter<uint> gpio, CppUMockGen::Parameter<uint> value)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "gpio_set_inover");
    if(gpio.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("gpio", gpio.getValue()); }
    if(value.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("value", value.getValue()); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& gpio_set_oeover(CppUMockGen::Parameter<uint> gpio, CppUMockGen::Parameter<uint> value)
{
    return gpio_set_oeover(1, gpio, value);
}
MockExpectedCall& gpio_set_oeover(unsigned int __numCalls__, CppUMockGen::Parameter<uint> gpio, CppUMockGen::Parameter<uint> value)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "gpio_set_oeover");
    if(gpio.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("gpio", gpio.getValue()); }
    if(value.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("value", value.getValue()); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& gpio_set_input_enabled(CppUMockGen::Parameter<uint> gpio, CppUMockGen::Parameter<_Bool> enable)
{
    return gpio_set_input_enabled(1, gpio, enable);
}
MockExpectedCall& gpio_set_input_enabled(unsigned int __numCalls__, CppUMockGen::Parameter<uint> gpio, CppUMockGen::Parameter<_Bool> enable)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "gpio_set_input_enabled");
    if(gpio.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("gpio", gpio.getValue()); }
    if(enable.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withBoolParameter("enable", enable.getValue()); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& gpio_set_input_hysteresis_enabled(CppUMockGen::Parameter<uint> gpio, CppUMockGen::Parameter<_Bool> enabled)
{
    return gpio_set_input_hysteresis_enabled(1, gpio, enabled);
}
MockExpectedCall& gpio_set_input_hysteresis_enabled(unsigned int __numCalls__, CppUMockGen::Parameter<uint> gpio, CppUMockGen::Parameter<_Bool> enabled)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "gpio_set_input_hysteresis_enabled");
    if(gpio.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("gpio", gpio.getValue()); }
    if(enabled.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withBoolParameter("enabled", enabled.getValue()); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& gpio_is_input_hysteresis_enabled(CppUMockGen::Parameter<uint> gpio, _Bool __return__)
{
    return gpio_is_input_hysteresis_enabled(1, gpio, __return__);
}
MockExpectedCall& gpio_is_input_hysteresis_enabled(unsigned int __numCalls__, CppUMockGen::Parameter<uint> gpio, _Bool __return__)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "gpio_is_input_hysteresis_enabled");
    if(gpio.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("gpio", gpio.getValue()); }
    __expectedCall__.andReturnValue(__return__);
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& gpio_set_slew_rate(CppUMockGen::Parameter<uint> gpio, CppUMockGen::Parameter<enum gpio_slew_rate> slew)
{
    return gpio_set_slew_rate(1, gpio, slew);
}
MockExpectedCall& gpio_set_slew_rate(unsigned int __numCalls__, CppUMockGen::Parameter<uint> gpio, CppUMockGen::Parameter<enum gpio_slew_rate> slew)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "gpio_set_slew_rate");
    if(gpio.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("gpio", gpio.getValue()); }
    if(slew.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withIntParameter("slew", static_cast<int>(slew.getValue())); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& gpio_get_slew_rate(CppUMockGen::Parameter<uint> gpio, enum gpio_slew_rate __return__)
{
    return gpio_get_slew_rate(1, gpio, __return__);
}
MockExpectedCall& gpio_get_slew_rate(unsigned int __numCalls__, CppUMockGen::Parameter<uint> gpio, enum gpio_slew_rate __return__)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "gpio_get_slew_rate");
    if(gpio.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("gpio", gpio.getValue()); }
    __expectedCall__.andReturnValue(static_cast<int>(__return__));
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& gpio_set_drive_strength(CppUMockGen::Parameter<uint> gpio, CppUMockGen::Parameter<enum gpio_drive_strength> drive)
{
    return gpio_set_drive_strength(1, gpio, drive);
}
MockExpectedCall& gpio_set_drive_strength(unsigned int __numCalls__, CppUMockGen::Parameter<uint> gpio, CppUMockGen::Parameter<enum gpio_drive_strength> drive)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "gpio_set_drive_strength");
    if(gpio.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("gpio", gpio.getValue()); }
    if(drive.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withIntParameter("drive", static_cast<int>(drive.getValue())); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& gpio_get_drive_strength(CppUMockGen::Parameter<uint> gpio, enum gpio_drive_strength __return__)
{
    return gpio_get_drive_strength(1, gpio, __return__);
}
MockExpectedCall& gpio_get_drive_strength(unsigned int __numCalls__, CppUMockGen::Parameter<uint> gpio, enum gpio_drive_strength __return__)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "gpio_get_drive_strength");
    if(gpio.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("gpio", gpio.getValue()); }
    __expectedCall__.andReturnValue(static_cast<int>(__return__));
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& gpio_init(CppUMockGen::Parameter<uint> gpio)
{
    return gpio_init(1, gpio);
}
MockExpectedCall& gpio_init(unsigned int __numCalls__, CppUMockGen::Parameter<uint> gpio)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "gpio_init");
    if(gpio.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("gpio", gpio.getValue()); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& gpio_init_mask(CppUMockGen::Parameter<uint> gpio_mask)
{
    return gpio_init_mask(1, gpio_mask);
}
MockExpectedCall& gpio_init_mask(unsigned int __numCalls__, CppUMockGen::Parameter<uint> gpio_mask)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "gpio_init_mask");
    if(gpio_mask.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("gpio_mask", gpio_mask.getValue()); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& gpio_get(CppUMockGen::Parameter<uint> gpio, _Bool __return__)
{
    return gpio_get(1, gpio, __return__);
}
MockExpectedCall& gpio_get(unsigned int __numCalls__, CppUMockGen::Parameter<uint> gpio, _Bool __return__)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "gpio_get");
    if(gpio.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("gpio", gpio.getValue()); }
    __expectedCall__.andReturnValue(__return__);
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& gpio_get_all(uint32_t __return__)
{
    return gpio_get_all(1, __return__);
}
MockExpectedCall& gpio_get_all(unsigned int __numCalls__, uint32_t __return__)
{
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "gpio_get_all");
    __expectedCall__.andReturnValue(static_cast<unsigned int>(__return__));
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& gpio_set_mask(CppUMockGen::Parameter<uint32_t> mask)
{
    return gpio_set_mask(1, mask);
}
MockExpectedCall& gpio_set_mask(unsigned int __numCalls__, CppUMockGen::Parameter<uint32_t> mask)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "gpio_set_mask");
    if(mask.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("mask", mask.getValue()); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& gpio_clr_mask(CppUMockGen::Parameter<uint32_t> mask)
{
    return gpio_clr_mask(1, mask);
}
MockExpectedCall& gpio_clr_mask(unsigned int __numCalls__, CppUMockGen::Parameter<uint32_t> mask)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "gpio_clr_mask");
    if(mask.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("mask", mask.getValue()); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& gpio_xor_mask(CppUMockGen::Parameter<uint32_t> mask)
{
    return gpio_xor_mask(1, mask);
}
MockExpectedCall& gpio_xor_mask(unsigned int __numCalls__, CppUMockGen::Parameter<uint32_t> mask)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "gpio_xor_mask");
    if(mask.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("mask", mask.getValue()); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& gpio_put_masked(CppUMockGen::Parameter<uint32_t> mask, CppUMockGen::Parameter<uint32_t> value)
{
    return gpio_put_masked(1, mask, value);
}
MockExpectedCall& gpio_put_masked(unsigned int __numCalls__, CppUMockGen::Parameter<uint32_t> mask, CppUMockGen::Parameter<uint32_t> value)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "gpio_put_masked");
    if(mask.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("mask", mask.getValue()); }
    if(value.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("value", value.getValue()); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& gpio_put_all(CppUMockGen::Parameter<uint32_t> value)
{
    return gpio_put_all(1, value);
}
MockExpectedCall& gpio_put_all(unsigned int __numCalls__, CppUMockGen::Parameter<uint32_t> value)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "gpio_put_all");
    if(value.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("value", value.getValue()); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& gpio_put(CppUMockGen::Parameter<uint> gpio, CppUMockGen::Parameter<int> value)
{
    return gpio_put(1, gpio, value);
}
MockExpectedCall& gpio_put(unsigned int __numCalls__, CppUMockGen::Parameter<uint> gpio, CppUMockGen::Parameter<int> value)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "gpio_put");
    if(gpio.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("gpio", gpio.getValue()); }
    if(value.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withIntParameter("value", value.getValue()); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& gpio_set_dir_out_masked(CppUMockGen::Parameter<uint32_t> mask)
{
    return gpio_set_dir_out_masked(1, mask);
}
MockExpectedCall& gpio_set_dir_out_masked(unsigned int __numCalls__, CppUMockGen::Parameter<uint32_t> mask)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "gpio_set_dir_out_masked");
    if(mask.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("mask", mask.getValue()); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& gpio_set_dir_in_masked(CppUMockGen::Parameter<uint32_t> mask)
{
    return gpio_set_dir_in_masked(1, mask);
}
MockExpectedCall& gpio_set_dir_in_masked(unsigned int __numCalls__, CppUMockGen::Parameter<uint32_t> mask)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "gpio_set_dir_in_masked");
    if(mask.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("mask", mask.getValue()); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& gpio_set_dir_masked(CppUMockGen::Parameter<uint32_t> mask, CppUMockGen::Parameter<uint32_t> value)
{
    return gpio_set_dir_masked(1, mask, value);
}
MockExpectedCall& gpio_set_dir_masked(unsigned int __numCalls__, CppUMockGen::Parameter<uint32_t> mask, CppUMockGen::Parameter<uint32_t> value)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "gpio_set_dir_masked");
    if(mask.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("mask", mask.getValue()); }
    if(value.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("value", value.getValue()); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& gpio_set_dir_all_bits(CppUMockGen::Parameter<uint32_t> value)
{
    return gpio_set_dir_all_bits(1, value);
}
MockExpectedCall& gpio_set_dir_all_bits(unsigned int __numCalls__, CppUMockGen::Parameter<uint32_t> value)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "gpio_set_dir_all_bits");
    if(value.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("value", value.getValue()); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& gpio_set_dir(CppUMockGen::Parameter<uint> gpio, CppUMockGen::Parameter<_Bool> out)
{
    return gpio_set_dir(1, gpio, out);
}
MockExpectedCall& gpio_set_dir(unsigned int __numCalls__, CppUMockGen::Parameter<uint> gpio, CppUMockGen::Parameter<_Bool> out)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "gpio_set_dir");
    if(gpio.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("gpio", gpio.getValue()); }
    if(out.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withBoolParameter("out", out.getValue()); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& gpio_debug_pins_init()
{
    return gpio_debug_pins_init(1);
}
MockExpectedCall& gpio_debug_pins_init(unsigned int __numCalls__)
{
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "gpio_debug_pins_init");
    return __expectedCall__;
}
}

