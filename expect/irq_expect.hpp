/*
 * This file has been auto-generated by CppUMockGen v0.6.
 *
 * Contents will NOT be preserved if it is regenerated!!!
 */

#include <CppUMockGen.hpp>

extern "C" {
#include "../include/hardware/irq.h"
}

#include <CppUTestExt/MockSupport.h>

namespace expect {
MockExpectedCall& irq_set_priority(CppUMockGen::Parameter<uint> num, CppUMockGen::Parameter<uint8_t> hardware_priority);
MockExpectedCall& irq_set_priority(unsigned int __numCalls__, CppUMockGen::Parameter<uint> num, CppUMockGen::Parameter<uint8_t> hardware_priority);
}

namespace expect {
MockExpectedCall& irq_get_priority(CppUMockGen::Parameter<uint> num, uint __return__);
MockExpectedCall& irq_get_priority(unsigned int __numCalls__, CppUMockGen::Parameter<uint> num, uint __return__);
}

namespace expect {
MockExpectedCall& irq_set_enabled(CppUMockGen::Parameter<uint> num, CppUMockGen::Parameter<_Bool> enabled);
MockExpectedCall& irq_set_enabled(unsigned int __numCalls__, CppUMockGen::Parameter<uint> num, CppUMockGen::Parameter<_Bool> enabled);
}

namespace expect {
MockExpectedCall& irq_is_enabled(CppUMockGen::Parameter<uint> num, _Bool __return__);
MockExpectedCall& irq_is_enabled(unsigned int __numCalls__, CppUMockGen::Parameter<uint> num, _Bool __return__);
}

namespace expect {
MockExpectedCall& irq_set_mask_enabled(CppUMockGen::Parameter<uint32_t> mask, CppUMockGen::Parameter<_Bool> enabled);
MockExpectedCall& irq_set_mask_enabled(unsigned int __numCalls__, CppUMockGen::Parameter<uint32_t> mask, CppUMockGen::Parameter<_Bool> enabled);
}

namespace expect {
MockExpectedCall& irq_has_shared_handler(CppUMockGen::Parameter<uint> num, _Bool __return__);
MockExpectedCall& irq_has_shared_handler(unsigned int __numCalls__, CppUMockGen::Parameter<uint> num, _Bool __return__);
}

namespace expect {
MockExpectedCall& irq_set_pending(CppUMockGen::Parameter<uint> num);
MockExpectedCall& irq_set_pending(unsigned int __numCalls__, CppUMockGen::Parameter<uint> num);
}

namespace expect {
MockExpectedCall& irq_init_priorities();
MockExpectedCall& irq_init_priorities(unsigned int __numCalls__);
}

namespace expect {
MockExpectedCall& user_irq_claim(CppUMockGen::Parameter<uint> irq_num);
MockExpectedCall& user_irq_claim(unsigned int __numCalls__, CppUMockGen::Parameter<uint> irq_num);
}

namespace expect {
MockExpectedCall& user_irq_unclaim(CppUMockGen::Parameter<uint> irq_num);
MockExpectedCall& user_irq_unclaim(unsigned int __numCalls__, CppUMockGen::Parameter<uint> irq_num);
}

namespace expect {
MockExpectedCall& user_irq_claim_unused(CppUMockGen::Parameter<_Bool> required, int __return__);
MockExpectedCall& user_irq_claim_unused(unsigned int __numCalls__, CppUMockGen::Parameter<_Bool> required, int __return__);
}

namespace expect {
MockExpectedCall& user_irq_is_claimed(CppUMockGen::Parameter<uint> irq_num, _Bool __return__);
MockExpectedCall& user_irq_is_claimed(unsigned int __numCalls__, CppUMockGen::Parameter<uint> irq_num, _Bool __return__);
}

