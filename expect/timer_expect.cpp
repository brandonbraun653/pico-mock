/*
 * This file has been auto-generated by CppUMockGen v0.6.
 *
 * Contents will NOT be preserved if it is regenerated!!!
 */

#include "timer_expect.hpp"

namespace expect {
MockExpectedCall& time_us_32(uint32_t __return__)
{
    return time_us_32(1, __return__);
}
MockExpectedCall& time_us_32(unsigned int __numCalls__, uint32_t __return__)
{
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "time_us_32");
    __expectedCall__.andReturnValue(static_cast<unsigned int>(__return__));
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& time_us_64(uint64_t __return__)
{
    return time_us_64(1, __return__);
}
MockExpectedCall& time_us_64(unsigned int __numCalls__, uint64_t __return__)
{
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "time_us_64");
    __expectedCall__.andReturnValue(static_cast<unsigned long>(__return__));
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& busy_wait_us_32(CppUMockGen::Parameter<uint32_t> delay_us)
{
    return busy_wait_us_32(1, delay_us);
}
MockExpectedCall& busy_wait_us_32(unsigned int __numCalls__, CppUMockGen::Parameter<uint32_t> delay_us)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "busy_wait_us_32");
    if(delay_us.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("delay_us", delay_us.getValue()); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& busy_wait_us(CppUMockGen::Parameter<uint64_t> delay_us)
{
    return busy_wait_us(1, delay_us);
}
MockExpectedCall& busy_wait_us(unsigned int __numCalls__, CppUMockGen::Parameter<uint64_t> delay_us)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "busy_wait_us");
    if(delay_us.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedLongIntParameter("delay_us", delay_us.getValue()); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& busy_wait_until(CppUMockGen::Parameter<absolute_time_t&> t)
{
    return busy_wait_until(1, t);
}
MockExpectedCall& busy_wait_until(unsigned int __numCalls__, CppUMockGen::Parameter<absolute_time_t&> t)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "busy_wait_until");
    if(t.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withParameterOfType("absolute_time_t", "t", &t.getValue()); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& time_reached(CppUMockGen::Parameter<absolute_time_t&> t, _Bool __return__)
{
    return time_reached(1, t, __return__);
}
MockExpectedCall& time_reached(unsigned int __numCalls__, CppUMockGen::Parameter<absolute_time_t&> t, _Bool __return__)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "time_reached");
    if(t.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withParameterOfType("absolute_time_t", "t", &t.getValue()); }
    __expectedCall__.andReturnValue(__return__);
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& hardware_alarm_claim(CppUMockGen::Parameter<uint> alarm_num)
{
    return hardware_alarm_claim(1, alarm_num);
}
MockExpectedCall& hardware_alarm_claim(unsigned int __numCalls__, CppUMockGen::Parameter<uint> alarm_num)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "hardware_alarm_claim");
    if(alarm_num.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("alarm_num", alarm_num.getValue()); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& hardware_alarm_unclaim(CppUMockGen::Parameter<uint> alarm_num)
{
    return hardware_alarm_unclaim(1, alarm_num);
}
MockExpectedCall& hardware_alarm_unclaim(unsigned int __numCalls__, CppUMockGen::Parameter<uint> alarm_num)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "hardware_alarm_unclaim");
    if(alarm_num.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("alarm_num", alarm_num.getValue()); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& hardware_alarm_claim_unused(CppUMockGen::Parameter<_Bool> required, int __return__)
{
    return hardware_alarm_claim_unused(1, required, __return__);
}
MockExpectedCall& hardware_alarm_claim_unused(unsigned int __numCalls__, CppUMockGen::Parameter<_Bool> required, int __return__)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "hardware_alarm_claim_unused");
    if(required.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withBoolParameter("required", required.getValue()); }
    __expectedCall__.andReturnValue(__return__);
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& hardware_alarm_set_target(CppUMockGen::Parameter<uint> alarm_num, CppUMockGen::Parameter<absolute_time_t&> t, _Bool __return__)
{
    return hardware_alarm_set_target(1, alarm_num, t, __return__);
}
MockExpectedCall& hardware_alarm_set_target(unsigned int __numCalls__, CppUMockGen::Parameter<uint> alarm_num, CppUMockGen::Parameter<absolute_time_t&> t, _Bool __return__)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "hardware_alarm_set_target");
    if(alarm_num.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("alarm_num", alarm_num.getValue()); }
    if(t.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withParameterOfType("absolute_time_t", "t", &t.getValue()); }
    __expectedCall__.andReturnValue(__return__);
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& hardware_alarm_cancel(CppUMockGen::Parameter<uint> alarm_num)
{
    return hardware_alarm_cancel(1, alarm_num);
}
MockExpectedCall& hardware_alarm_cancel(unsigned int __numCalls__, CppUMockGen::Parameter<uint> alarm_num)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "hardware_alarm_cancel");
    if(alarm_num.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("alarm_num", alarm_num.getValue()); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& hardware_alarm_force_irq(CppUMockGen::Parameter<uint> alarm_num)
{
    return hardware_alarm_force_irq(1, alarm_num);
}
MockExpectedCall& hardware_alarm_force_irq(unsigned int __numCalls__, CppUMockGen::Parameter<uint> alarm_num)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "hardware_alarm_force_irq");
    if(alarm_num.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("alarm_num", alarm_num.getValue()); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

