/*
 * This file has been auto-generated by CppUMockGen v0.6.
 *
 * Contents will NOT be preserved if it is regenerated!!!
 */

#include <CppUMockGen.hpp>

extern "C" {
#include "../include/hardware/pwm.h"
}

#include <CppUTestExt/MockSupport.h>

namespace expect {
MockExpectedCall& pwm_set_irq_enabled(CppUMockGen::Parameter<uint> slice_num, CppUMockGen::Parameter<_Bool> enabled);
MockExpectedCall& pwm_set_irq_enabled(unsigned int __numCalls__, CppUMockGen::Parameter<uint> slice_num, CppUMockGen::Parameter<_Bool> enabled);
}

namespace expect {
MockExpectedCall& pwm_set_irq_mask_enabled(CppUMockGen::Parameter<uint32_t> slice_mask, CppUMockGen::Parameter<_Bool> enabled);
MockExpectedCall& pwm_set_irq_mask_enabled(unsigned int __numCalls__, CppUMockGen::Parameter<uint32_t> slice_mask, CppUMockGen::Parameter<_Bool> enabled);
}

namespace expect {
MockExpectedCall& pwm_clear_irq(CppUMockGen::Parameter<uint> slice_num);
MockExpectedCall& pwm_clear_irq(unsigned int __numCalls__, CppUMockGen::Parameter<uint> slice_num);
}

namespace expect {
MockExpectedCall& pwm_get_irq_status_mask(uint32_t __return__);
MockExpectedCall& pwm_get_irq_status_mask(unsigned int __numCalls__, uint32_t __return__);
}

namespace expect {
MockExpectedCall& pwm_force_irq(CppUMockGen::Parameter<uint> slice_num);
MockExpectedCall& pwm_force_irq(unsigned int __numCalls__, CppUMockGen::Parameter<uint> slice_num);
}

namespace expect {
MockExpectedCall& pwm_get_dreq(CppUMockGen::Parameter<uint> slice_num, uint __return__);
MockExpectedCall& pwm_get_dreq(unsigned int __numCalls__, CppUMockGen::Parameter<uint> slice_num, uint __return__);
}

