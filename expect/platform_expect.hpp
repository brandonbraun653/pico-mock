/*
 * This file has been auto-generated by CppUMockGen v0.6.
 *
 * Contents will NOT be preserved if it is regenerated!!!
 */

#include <CppUMockGen.hpp>

extern "C" {
#include "../include/pico/platform.h"
}

#include <CppUTestExt/MockSupport.h>

namespace expect {
MockExpectedCall& panic_unsupported();
MockExpectedCall& panic_unsupported(unsigned int __numCalls__);
}

namespace expect {
MockExpectedCall& panic(CppUMockGen::Parameter<const char *> fmt);
MockExpectedCall& panic(unsigned int __numCalls__, CppUMockGen::Parameter<const char *> fmt);
}

namespace expect {
MockExpectedCall& running_on_fpga(_Bool __return__);
MockExpectedCall& running_on_fpga(unsigned int __numCalls__, _Bool __return__);
}

namespace expect {
MockExpectedCall& rp2040_chip_version(uint8_t __return__);
MockExpectedCall& rp2040_chip_version(unsigned int __numCalls__, uint8_t __return__);
}

namespace expect {
MockExpectedCall& busy_wait_at_least_cycles(CppUMockGen::Parameter<uint32_t> minimum_cycles);
MockExpectedCall& busy_wait_at_least_cycles(unsigned int __numCalls__, CppUMockGen::Parameter<uint32_t> minimum_cycles);
}

namespace expect {
MockExpectedCall& get_core_num(uint __return__);
MockExpectedCall& get_core_num(unsigned int __numCalls__, uint __return__);
}

namespace expect {
MockExpectedCall& rp2040_rom_version(uint8_t __return__);
MockExpectedCall& rp2040_rom_version(unsigned int __numCalls__, uint8_t __return__);
}

namespace expect {
MockExpectedCall& tight_loop_contents();
MockExpectedCall& tight_loop_contents(unsigned int __numCalls__);
}

