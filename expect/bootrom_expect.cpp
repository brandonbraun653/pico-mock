/*
 * This file has been auto-generated by CppUMockGen v0.6.
 *
 * Contents will NOT be preserved if it is regenerated!!!
 */

#include "bootrom_expect.hpp"

namespace expect {
MockExpectedCall& rom_funcs_lookup(uint32_t * table, size_t __sizeof_table, CppUMockGen::Parameter<unsigned int> count, _Bool __return__)
{
    return rom_funcs_lookup(1, table, __sizeof_table, count, __return__);
}
MockExpectedCall& rom_funcs_lookup(unsigned int __numCalls__, uint32_t * table, size_t __sizeof_table, CppUMockGen::Parameter<unsigned int> count, _Bool __return__)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "rom_funcs_lookup");
    __expectedCall__.withOutputParameterReturning("table", table, __sizeof_table);
    if(count.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("count", count.getValue()); }
    __expectedCall__.andReturnValue(__return__);
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& rom_hword_as_ptr(CppUMockGen::Parameter<uint16_t> rom_address, void * __return__)
{
    return rom_hword_as_ptr(1, rom_address, __return__);
}
MockExpectedCall& rom_hword_as_ptr(unsigned int __numCalls__, CppUMockGen::Parameter<uint16_t> rom_address, void * __return__)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "rom_hword_as_ptr");
    if(rom_address.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("rom_address", rom_address.getValue()); }
    __expectedCall__.andReturnValue(__return__);
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& rom_func_lookup_inline(CppUMockGen::Parameter<uint32_t> code, void * __return__)
{
    return rom_func_lookup_inline(1, code, __return__);
}
MockExpectedCall& rom_func_lookup_inline(unsigned int __numCalls__, CppUMockGen::Parameter<uint32_t> code, void * __return__)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "rom_func_lookup_inline");
    if(code.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("code", code.getValue()); }
    __expectedCall__.andReturnValue(__return__);
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& reset_usb_boot(CppUMockGen::Parameter<uint32_t> usb_activity_gpio_pin_mask, CppUMockGen::Parameter<uint32_t> disable_interface_mask)
{
    return reset_usb_boot(1, usb_activity_gpio_pin_mask, disable_interface_mask);
}
MockExpectedCall& reset_usb_boot(unsigned int __numCalls__, CppUMockGen::Parameter<uint32_t> usb_activity_gpio_pin_mask, CppUMockGen::Parameter<uint32_t> disable_interface_mask)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "reset_usb_boot");
    if(usb_activity_gpio_pin_mask.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("usb_activity_gpio_pin_mask", usb_activity_gpio_pin_mask.getValue()); }
    if(disable_interface_mask.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("disable_interface_mask", disable_interface_mask.getValue()); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

