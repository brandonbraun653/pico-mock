/*
 * This file has been auto-generated by CppUMockGen v0.6.
 *
 * Contents will NOT be preserved if it is regenerated!!!
 */

#include "resets_expect.hpp"

namespace expect {
MockExpectedCall& reset_block(CppUMockGen::Parameter<uint32_t> bits)
{
    return reset_block(1, bits);
}
MockExpectedCall& reset_block(unsigned int __numCalls__, CppUMockGen::Parameter<uint32_t> bits)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "reset_block");
    if(bits.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("bits", bits.getValue()); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& unreset_block(CppUMockGen::Parameter<uint32_t> bits)
{
    return unreset_block(1, bits);
}
MockExpectedCall& unreset_block(unsigned int __numCalls__, CppUMockGen::Parameter<uint32_t> bits)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "unreset_block");
    if(bits.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("bits", bits.getValue()); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& unreset_block_wait(CppUMockGen::Parameter<uint32_t> bits)
{
    return unreset_block_wait(1, bits);
}
MockExpectedCall& unreset_block_wait(unsigned int __numCalls__, CppUMockGen::Parameter<uint32_t> bits)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "unreset_block_wait");
    if(bits.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("bits", bits.getValue()); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

