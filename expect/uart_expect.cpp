/*
 * This file has been auto-generated by CppUMockGen v0.6.
 *
 * Contents will NOT be preserved if it is regenerated!!!
 */

#include "uart_expect.hpp"

namespace expect {
MockExpectedCall& uart_init(uart_inst_t * uart, CppUMockGen::Parameter<uint> baudrate, uint __return__)
{
    return uart_init(1, uart, baudrate, __return__);
}
MockExpectedCall& uart_init(unsigned int __numCalls__, uart_inst_t * uart, CppUMockGen::Parameter<uint> baudrate, uint __return__)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "uart_init");
    __expectedCall__.withOutputParameterOfTypeReturning("uart_inst_t", "uart", uart);
    if(baudrate.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("baudrate", baudrate.getValue()); }
    __expectedCall__.andReturnValue(static_cast<unsigned int>(__return__));
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& uart_deinit(uart_inst_t * uart)
{
    return uart_deinit(1, uart);
}
MockExpectedCall& uart_deinit(unsigned int __numCalls__, uart_inst_t * uart)
{
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "uart_deinit");
    __expectedCall__.withOutputParameterOfTypeReturning("uart_inst_t", "uart", uart);
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& uart_set_baudrate(uart_inst_t * uart, CppUMockGen::Parameter<uint> baudrate, uint __return__)
{
    return uart_set_baudrate(1, uart, baudrate, __return__);
}
MockExpectedCall& uart_set_baudrate(unsigned int __numCalls__, uart_inst_t * uart, CppUMockGen::Parameter<uint> baudrate, uint __return__)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "uart_set_baudrate");
    __expectedCall__.withOutputParameterOfTypeReturning("uart_inst_t", "uart", uart);
    if(baudrate.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("baudrate", baudrate.getValue()); }
    __expectedCall__.andReturnValue(static_cast<unsigned int>(__return__));
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& uart_set_hw_flow(uart_inst_t * uart, CppUMockGen::Parameter<_Bool> cts, CppUMockGen::Parameter<_Bool> rts)
{
    return uart_set_hw_flow(1, uart, cts, rts);
}
MockExpectedCall& uart_set_hw_flow(unsigned int __numCalls__, uart_inst_t * uart, CppUMockGen::Parameter<_Bool> cts, CppUMockGen::Parameter<_Bool> rts)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "uart_set_hw_flow");
    __expectedCall__.withOutputParameterOfTypeReturning("uart_inst_t", "uart", uart);
    if(cts.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withBoolParameter("cts", cts.getValue()); }
    if(rts.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withBoolParameter("rts", rts.getValue()); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& uart_set_format(uart_inst_t * uart, CppUMockGen::Parameter<uint> data_bits, CppUMockGen::Parameter<uint> stop_bits, CppUMockGen::Parameter<uart_parity_t> parity)
{
    return uart_set_format(1, uart, data_bits, stop_bits, parity);
}
MockExpectedCall& uart_set_format(unsigned int __numCalls__, uart_inst_t * uart, CppUMockGen::Parameter<uint> data_bits, CppUMockGen::Parameter<uint> stop_bits, CppUMockGen::Parameter<uart_parity_t> parity)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "uart_set_format");
    __expectedCall__.withOutputParameterOfTypeReturning("uart_inst_t", "uart", uart);
    if(data_bits.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("data_bits", data_bits.getValue()); }
    if(stop_bits.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("stop_bits", stop_bits.getValue()); }
    if(parity.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withIntParameter("parity", static_cast<int>(parity.getValue())); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& uart_set_irq_enables(uart_inst_t * uart, CppUMockGen::Parameter<_Bool> rx_has_data, CppUMockGen::Parameter<_Bool> tx_needs_data)
{
    return uart_set_irq_enables(1, uart, rx_has_data, tx_needs_data);
}
MockExpectedCall& uart_set_irq_enables(unsigned int __numCalls__, uart_inst_t * uart, CppUMockGen::Parameter<_Bool> rx_has_data, CppUMockGen::Parameter<_Bool> tx_needs_data)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "uart_set_irq_enables");
    __expectedCall__.withOutputParameterOfTypeReturning("uart_inst_t", "uart", uart);
    if(rx_has_data.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withBoolParameter("rx_has_data", rx_has_data.getValue()); }
    if(tx_needs_data.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withBoolParameter("tx_needs_data", tx_needs_data.getValue()); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& uart_is_writable(uart_inst_t * uart, size_t __return__)
{
    return uart_is_writable(1, uart, __return__);
}
MockExpectedCall& uart_is_writable(unsigned int __numCalls__, uart_inst_t * uart, size_t __return__)
{
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "uart_is_writable");
    __expectedCall__.withOutputParameterOfTypeReturning("uart_inst_t", "uart", uart);
    __expectedCall__.andReturnValue(static_cast<unsigned long>(__return__));
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& uart_is_readable(uart_inst_t * uart, size_t __return__)
{
    return uart_is_readable(1, uart, __return__);
}
MockExpectedCall& uart_is_readable(unsigned int __numCalls__, uart_inst_t * uart, size_t __return__)
{
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "uart_is_readable");
    __expectedCall__.withOutputParameterOfTypeReturning("uart_inst_t", "uart", uart);
    __expectedCall__.andReturnValue(static_cast<unsigned long>(__return__));
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& uart_write_blocking(uart_inst_t * uart, CppUMockGen::Parameter<const uint8_t *> src, CppUMockGen::Parameter<size_t> len)
{
    return uart_write_blocking(1, uart, src, len);
}
MockExpectedCall& uart_write_blocking(unsigned int __numCalls__, uart_inst_t * uart, CppUMockGen::Parameter<const uint8_t *> src, CppUMockGen::Parameter<size_t> len)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "uart_write_blocking");
    __expectedCall__.withOutputParameterOfTypeReturning("uart_inst_t", "uart", uart);
    if(src.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withConstPointerParameter("src", src.getValue()); }
    if(len.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedLongIntParameter("len", len.getValue()); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& uart_read_blocking(uart_inst_t * uart, uint8_t * dst, size_t __sizeof_dst, CppUMockGen::Parameter<size_t> len)
{
    return uart_read_blocking(1, uart, dst, __sizeof_dst, len);
}
MockExpectedCall& uart_read_blocking(unsigned int __numCalls__, uart_inst_t * uart, uint8_t * dst, size_t __sizeof_dst, CppUMockGen::Parameter<size_t> len)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "uart_read_blocking");
    __expectedCall__.withOutputParameterOfTypeReturning("uart_inst_t", "uart", uart);
    __expectedCall__.withOutputParameterReturning("dst", dst, __sizeof_dst);
    if(len.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedLongIntParameter("len", len.getValue()); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& uart_putc(uart_inst_t * uart, CppUMockGen::Parameter<char> c)
{
    return uart_putc(1, uart, c);
}
MockExpectedCall& uart_putc(unsigned int __numCalls__, uart_inst_t * uart, CppUMockGen::Parameter<char> c)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "uart_putc");
    __expectedCall__.withOutputParameterOfTypeReturning("uart_inst_t", "uart", uart);
    if(c.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withIntParameter("c", c.getValue()); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& uart_puts(uart_inst_t * uart, CppUMockGen::Parameter<const char *> s)
{
    return uart_puts(1, uart, s);
}
MockExpectedCall& uart_puts(unsigned int __numCalls__, uart_inst_t * uart, CppUMockGen::Parameter<const char *> s)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "uart_puts");
    __expectedCall__.withOutputParameterOfTypeReturning("uart_inst_t", "uart", uart);
    if(s.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withStringParameter("s", s.getValue()); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& uart_getc(uart_inst_t * uart, char __return__)
{
    return uart_getc(1, uart, __return__);
}
MockExpectedCall& uart_getc(unsigned int __numCalls__, uart_inst_t * uart, char __return__)
{
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "uart_getc");
    __expectedCall__.withOutputParameterOfTypeReturning("uart_inst_t", "uart", uart);
    __expectedCall__.andReturnValue(static_cast<int>(__return__));
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& uart_set_break(uart_inst_t * uart, CppUMockGen::Parameter<_Bool> en)
{
    return uart_set_break(1, uart, en);
}
MockExpectedCall& uart_set_break(unsigned int __numCalls__, uart_inst_t * uart, CppUMockGen::Parameter<_Bool> en)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "uart_set_break");
    __expectedCall__.withOutputParameterOfTypeReturning("uart_inst_t", "uart", uart);
    if(en.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withBoolParameter("en", en.getValue()); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& uart_default_tx_wait_blocking()
{
    return uart_default_tx_wait_blocking(1);
}
MockExpectedCall& uart_default_tx_wait_blocking(unsigned int __numCalls__)
{
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "uart_default_tx_wait_blocking");
    return __expectedCall__;
}
}

