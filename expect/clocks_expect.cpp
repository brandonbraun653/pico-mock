/*
 * This file has been auto-generated by CppUMockGen v0.6.
 *
 * Contents will NOT be preserved if it is regenerated!!!
 */

#include "clocks_expect.hpp"

namespace expect {
MockExpectedCall& clocks_init()
{
    return clocks_init(1);
}
MockExpectedCall& clocks_init(unsigned int __numCalls__)
{
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "clocks_init");
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& clock_configure(CppUMockGen::Parameter<enum clock_index> clk_index, CppUMockGen::Parameter<uint32_t> src, CppUMockGen::Parameter<uint32_t> auxsrc, CppUMockGen::Parameter<uint32_t> src_freq, CppUMockGen::Parameter<uint32_t> freq, _Bool __return__)
{
    return clock_configure(1, clk_index, src, auxsrc, src_freq, freq, __return__);
}
MockExpectedCall& clock_configure(unsigned int __numCalls__, CppUMockGen::Parameter<enum clock_index> clk_index, CppUMockGen::Parameter<uint32_t> src, CppUMockGen::Parameter<uint32_t> auxsrc, CppUMockGen::Parameter<uint32_t> src_freq, CppUMockGen::Parameter<uint32_t> freq, _Bool __return__)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "clock_configure");
    if(clk_index.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withIntParameter("clk_index", static_cast<int>(clk_index.getValue())); }
    if(src.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("src", src.getValue()); }
    if(auxsrc.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("auxsrc", auxsrc.getValue()); }
    if(src_freq.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("src_freq", src_freq.getValue()); }
    if(freq.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("freq", freq.getValue()); }
    __expectedCall__.andReturnValue(__return__);
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& clock_stop(CppUMockGen::Parameter<enum clock_index> clk_index)
{
    return clock_stop(1, clk_index);
}
MockExpectedCall& clock_stop(unsigned int __numCalls__, CppUMockGen::Parameter<enum clock_index> clk_index)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "clock_stop");
    if(clk_index.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withIntParameter("clk_index", static_cast<int>(clk_index.getValue())); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& clock_get_hz(CppUMockGen::Parameter<enum clock_index> clk_index, uint32_t __return__)
{
    return clock_get_hz(1, clk_index, __return__);
}
MockExpectedCall& clock_get_hz(unsigned int __numCalls__, CppUMockGen::Parameter<enum clock_index> clk_index, uint32_t __return__)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "clock_get_hz");
    if(clk_index.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withIntParameter("clk_index", static_cast<int>(clk_index.getValue())); }
    __expectedCall__.andReturnValue(static_cast<unsigned int>(__return__));
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& frequency_count_khz(CppUMockGen::Parameter<uint> src, uint32_t __return__)
{
    return frequency_count_khz(1, src, __return__);
}
MockExpectedCall& frequency_count_khz(unsigned int __numCalls__, CppUMockGen::Parameter<uint> src, uint32_t __return__)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "frequency_count_khz");
    if(src.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("src", src.getValue()); }
    __expectedCall__.andReturnValue(static_cast<unsigned int>(__return__));
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& clock_set_reported_hz(CppUMockGen::Parameter<enum clock_index> clk_index, CppUMockGen::Parameter<uint> hz)
{
    return clock_set_reported_hz(1, clk_index, hz);
}
MockExpectedCall& clock_set_reported_hz(unsigned int __numCalls__, CppUMockGen::Parameter<enum clock_index> clk_index, CppUMockGen::Parameter<uint> hz)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "clock_set_reported_hz");
    if(clk_index.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withIntParameter("clk_index", static_cast<int>(clk_index.getValue())); }
    if(hz.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("hz", hz.getValue()); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& clock_gpio_init_int_frac(CppUMockGen::Parameter<uint> gpio, CppUMockGen::Parameter<uint> src, CppUMockGen::Parameter<uint32_t> div_int, CppUMockGen::Parameter<uint8_t> div_frac)
{
    return clock_gpio_init_int_frac(1, gpio, src, div_int, div_frac);
}
MockExpectedCall& clock_gpio_init_int_frac(unsigned int __numCalls__, CppUMockGen::Parameter<uint> gpio, CppUMockGen::Parameter<uint> src, CppUMockGen::Parameter<uint32_t> div_int, CppUMockGen::Parameter<uint8_t> div_frac)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "clock_gpio_init_int_frac");
    if(gpio.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("gpio", gpio.getValue()); }
    if(src.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("src", src.getValue()); }
    if(div_int.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("div_int", div_int.getValue()); }
    if(div_frac.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("div_frac", div_frac.getValue()); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& clock_configure_gpin(CppUMockGen::Parameter<enum clock_index> clk_index, CppUMockGen::Parameter<uint> gpio, CppUMockGen::Parameter<uint32_t> src_freq, CppUMockGen::Parameter<uint32_t> freq, _Bool __return__)
{
    return clock_configure_gpin(1, clk_index, gpio, src_freq, freq, __return__);
}
MockExpectedCall& clock_configure_gpin(unsigned int __numCalls__, CppUMockGen::Parameter<enum clock_index> clk_index, CppUMockGen::Parameter<uint> gpio, CppUMockGen::Parameter<uint32_t> src_freq, CppUMockGen::Parameter<uint32_t> freq, _Bool __return__)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "clock_configure_gpin");
    if(clk_index.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withIntParameter("clk_index", static_cast<int>(clk_index.getValue())); }
    if(gpio.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("gpio", gpio.getValue()); }
    if(src_freq.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("src_freq", src_freq.getValue()); }
    if(freq.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("freq", freq.getValue()); }
    __expectedCall__.andReturnValue(__return__);
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

