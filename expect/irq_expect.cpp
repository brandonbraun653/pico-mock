/*
 * This file has been auto-generated by CppUMockGen v0.6.
 *
 * Contents will NOT be preserved if it is regenerated!!!
 */

#include "irq_expect.hpp"

namespace expect {
MockExpectedCall& irq_set_priority(CppUMockGen::Parameter<uint> num, CppUMockGen::Parameter<uint8_t> hardware_priority)
{
    return irq_set_priority(1, num, hardware_priority);
}
MockExpectedCall& irq_set_priority(unsigned int __numCalls__, CppUMockGen::Parameter<uint> num, CppUMockGen::Parameter<uint8_t> hardware_priority)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "irq_set_priority");
    if(num.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("num", num.getValue()); }
    if(hardware_priority.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("hardware_priority", hardware_priority.getValue()); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& irq_get_priority(CppUMockGen::Parameter<uint> num, uint __return__)
{
    return irq_get_priority(1, num, __return__);
}
MockExpectedCall& irq_get_priority(unsigned int __numCalls__, CppUMockGen::Parameter<uint> num, uint __return__)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "irq_get_priority");
    if(num.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("num", num.getValue()); }
    __expectedCall__.andReturnValue(static_cast<unsigned int>(__return__));
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& irq_set_enabled(CppUMockGen::Parameter<uint> num, CppUMockGen::Parameter<_Bool> enabled)
{
    return irq_set_enabled(1, num, enabled);
}
MockExpectedCall& irq_set_enabled(unsigned int __numCalls__, CppUMockGen::Parameter<uint> num, CppUMockGen::Parameter<_Bool> enabled)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "irq_set_enabled");
    if(num.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("num", num.getValue()); }
    if(enabled.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withBoolParameter("enabled", enabled.getValue()); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& irq_is_enabled(CppUMockGen::Parameter<uint> num, _Bool __return__)
{
    return irq_is_enabled(1, num, __return__);
}
MockExpectedCall& irq_is_enabled(unsigned int __numCalls__, CppUMockGen::Parameter<uint> num, _Bool __return__)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "irq_is_enabled");
    if(num.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("num", num.getValue()); }
    __expectedCall__.andReturnValue(__return__);
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& irq_set_mask_enabled(CppUMockGen::Parameter<uint32_t> mask, CppUMockGen::Parameter<_Bool> enabled)
{
    return irq_set_mask_enabled(1, mask, enabled);
}
MockExpectedCall& irq_set_mask_enabled(unsigned int __numCalls__, CppUMockGen::Parameter<uint32_t> mask, CppUMockGen::Parameter<_Bool> enabled)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "irq_set_mask_enabled");
    if(mask.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("mask", mask.getValue()); }
    if(enabled.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withBoolParameter("enabled", enabled.getValue()); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& irq_has_shared_handler(CppUMockGen::Parameter<uint> num, _Bool __return__)
{
    return irq_has_shared_handler(1, num, __return__);
}
MockExpectedCall& irq_has_shared_handler(unsigned int __numCalls__, CppUMockGen::Parameter<uint> num, _Bool __return__)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "irq_has_shared_handler");
    if(num.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("num", num.getValue()); }
    __expectedCall__.andReturnValue(__return__);
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& irq_set_pending(CppUMockGen::Parameter<uint> num)
{
    return irq_set_pending(1, num);
}
MockExpectedCall& irq_set_pending(unsigned int __numCalls__, CppUMockGen::Parameter<uint> num)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "irq_set_pending");
    if(num.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("num", num.getValue()); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& irq_init_priorities()
{
    return irq_init_priorities(1);
}
MockExpectedCall& irq_init_priorities(unsigned int __numCalls__)
{
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "irq_init_priorities");
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& user_irq_claim(CppUMockGen::Parameter<uint> irq_num)
{
    return user_irq_claim(1, irq_num);
}
MockExpectedCall& user_irq_claim(unsigned int __numCalls__, CppUMockGen::Parameter<uint> irq_num)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "user_irq_claim");
    if(irq_num.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("irq_num", irq_num.getValue()); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& user_irq_unclaim(CppUMockGen::Parameter<uint> irq_num)
{
    return user_irq_unclaim(1, irq_num);
}
MockExpectedCall& user_irq_unclaim(unsigned int __numCalls__, CppUMockGen::Parameter<uint> irq_num)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "user_irq_unclaim");
    if(irq_num.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("irq_num", irq_num.getValue()); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& user_irq_claim_unused(CppUMockGen::Parameter<_Bool> required, int __return__)
{
    return user_irq_claim_unused(1, required, __return__);
}
MockExpectedCall& user_irq_claim_unused(unsigned int __numCalls__, CppUMockGen::Parameter<_Bool> required, int __return__)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "user_irq_claim_unused");
    if(required.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withBoolParameter("required", required.getValue()); }
    __expectedCall__.andReturnValue(__return__);
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& user_irq_is_claimed(CppUMockGen::Parameter<uint> irq_num, _Bool __return__)
{
    return user_irq_is_claimed(1, irq_num, __return__);
}
MockExpectedCall& user_irq_is_claimed(unsigned int __numCalls__, CppUMockGen::Parameter<uint> irq_num, _Bool __return__)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "user_irq_is_claimed");
    if(irq_num.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("irq_num", irq_num.getValue()); }
    __expectedCall__.andReturnValue(__return__);
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

