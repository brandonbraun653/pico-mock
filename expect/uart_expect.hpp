/*
 * This file has been auto-generated by CppUMockGen v0.6.
 *
 * Contents will NOT be preserved if it is regenerated!!!
 */

#include <CppUMockGen.hpp>

extern "C" {
#include "../include/hardware/uart.h"
}

#include <CppUTestExt/MockSupport.h>

namespace expect {
MockExpectedCall& uart_init(uart_inst_t * uart, CppUMockGen::Parameter<uint> baudrate, uint __return__);
MockExpectedCall& uart_init(unsigned int __numCalls__, uart_inst_t * uart, CppUMockGen::Parameter<uint> baudrate, uint __return__);
}

namespace expect {
MockExpectedCall& uart_deinit(uart_inst_t * uart);
MockExpectedCall& uart_deinit(unsigned int __numCalls__, uart_inst_t * uart);
}

namespace expect {
MockExpectedCall& uart_set_baudrate(uart_inst_t * uart, CppUMockGen::Parameter<uint> baudrate, uint __return__);
MockExpectedCall& uart_set_baudrate(unsigned int __numCalls__, uart_inst_t * uart, CppUMockGen::Parameter<uint> baudrate, uint __return__);
}

namespace expect {
MockExpectedCall& uart_set_hw_flow(uart_inst_t * uart, CppUMockGen::Parameter<_Bool> cts, CppUMockGen::Parameter<_Bool> rts);
MockExpectedCall& uart_set_hw_flow(unsigned int __numCalls__, uart_inst_t * uart, CppUMockGen::Parameter<_Bool> cts, CppUMockGen::Parameter<_Bool> rts);
}

namespace expect {
MockExpectedCall& uart_set_format(uart_inst_t * uart, CppUMockGen::Parameter<uint> data_bits, CppUMockGen::Parameter<uint> stop_bits, CppUMockGen::Parameter<uart_parity_t> parity);
MockExpectedCall& uart_set_format(unsigned int __numCalls__, uart_inst_t * uart, CppUMockGen::Parameter<uint> data_bits, CppUMockGen::Parameter<uint> stop_bits, CppUMockGen::Parameter<uart_parity_t> parity);
}

namespace expect {
MockExpectedCall& uart_set_irq_enables(uart_inst_t * uart, CppUMockGen::Parameter<_Bool> rx_has_data, CppUMockGen::Parameter<_Bool> tx_needs_data);
MockExpectedCall& uart_set_irq_enables(unsigned int __numCalls__, uart_inst_t * uart, CppUMockGen::Parameter<_Bool> rx_has_data, CppUMockGen::Parameter<_Bool> tx_needs_data);
}

namespace expect {
MockExpectedCall& uart_is_writable(uart_inst_t * uart, size_t __return__);
MockExpectedCall& uart_is_writable(unsigned int __numCalls__, uart_inst_t * uart, size_t __return__);
}

namespace expect {
MockExpectedCall& uart_is_readable(uart_inst_t * uart, size_t __return__);
MockExpectedCall& uart_is_readable(unsigned int __numCalls__, uart_inst_t * uart, size_t __return__);
}

namespace expect {
MockExpectedCall& uart_write_blocking(uart_inst_t * uart, CppUMockGen::Parameter<const uint8_t *> src, CppUMockGen::Parameter<size_t> len);
MockExpectedCall& uart_write_blocking(unsigned int __numCalls__, uart_inst_t * uart, CppUMockGen::Parameter<const uint8_t *> src, CppUMockGen::Parameter<size_t> len);
}

namespace expect {
MockExpectedCall& uart_read_blocking(uart_inst_t * uart, uint8_t * dst, size_t __sizeof_dst, CppUMockGen::Parameter<size_t> len);
MockExpectedCall& uart_read_blocking(unsigned int __numCalls__, uart_inst_t * uart, uint8_t * dst, size_t __sizeof_dst, CppUMockGen::Parameter<size_t> len);
}

namespace expect {
MockExpectedCall& uart_putc(uart_inst_t * uart, CppUMockGen::Parameter<char> c);
MockExpectedCall& uart_putc(unsigned int __numCalls__, uart_inst_t * uart, CppUMockGen::Parameter<char> c);
}

namespace expect {
MockExpectedCall& uart_puts(uart_inst_t * uart, CppUMockGen::Parameter<const char *> s);
MockExpectedCall& uart_puts(unsigned int __numCalls__, uart_inst_t * uart, CppUMockGen::Parameter<const char *> s);
}

namespace expect {
MockExpectedCall& uart_getc(uart_inst_t * uart, char __return__);
MockExpectedCall& uart_getc(unsigned int __numCalls__, uart_inst_t * uart, char __return__);
}

namespace expect {
MockExpectedCall& uart_set_break(uart_inst_t * uart, CppUMockGen::Parameter<_Bool> en);
MockExpectedCall& uart_set_break(unsigned int __numCalls__, uart_inst_t * uart, CppUMockGen::Parameter<_Bool> en);
}

namespace expect {
MockExpectedCall& uart_default_tx_wait_blocking();
MockExpectedCall& uart_default_tx_wait_blocking(unsigned int __numCalls__);
}

