/*
 * This file has been auto-generated by CppUMockGen v0.6.
 *
 * Contents will NOT be preserved if it is regenerated!!!
 */

#include <CppUMockGen.hpp>

extern "C" {
#include "../include/hardware/timer.h"
}

#include <CppUTestExt/MockSupport.h>

namespace expect {
MockExpectedCall& time_us_32(uint32_t __return__);
MockExpectedCall& time_us_32(unsigned int __numCalls__, uint32_t __return__);
}

namespace expect {
MockExpectedCall& time_us_64(uint64_t __return__);
MockExpectedCall& time_us_64(unsigned int __numCalls__, uint64_t __return__);
}

namespace expect {
MockExpectedCall& busy_wait_us_32(CppUMockGen::Parameter<uint32_t> delay_us);
MockExpectedCall& busy_wait_us_32(unsigned int __numCalls__, CppUMockGen::Parameter<uint32_t> delay_us);
}

namespace expect {
MockExpectedCall& busy_wait_us(CppUMockGen::Parameter<uint64_t> delay_us);
MockExpectedCall& busy_wait_us(unsigned int __numCalls__, CppUMockGen::Parameter<uint64_t> delay_us);
}

namespace expect {
MockExpectedCall& busy_wait_until(CppUMockGen::Parameter<absolute_time_t&> t);
MockExpectedCall& busy_wait_until(unsigned int __numCalls__, CppUMockGen::Parameter<absolute_time_t&> t);
}

namespace expect {
MockExpectedCall& time_reached(CppUMockGen::Parameter<absolute_time_t&> t, _Bool __return__);
MockExpectedCall& time_reached(unsigned int __numCalls__, CppUMockGen::Parameter<absolute_time_t&> t, _Bool __return__);
}

namespace expect {
MockExpectedCall& hardware_alarm_claim(CppUMockGen::Parameter<uint> alarm_num);
MockExpectedCall& hardware_alarm_claim(unsigned int __numCalls__, CppUMockGen::Parameter<uint> alarm_num);
}

namespace expect {
MockExpectedCall& hardware_alarm_unclaim(CppUMockGen::Parameter<uint> alarm_num);
MockExpectedCall& hardware_alarm_unclaim(unsigned int __numCalls__, CppUMockGen::Parameter<uint> alarm_num);
}

namespace expect {
MockExpectedCall& hardware_alarm_claim_unused(CppUMockGen::Parameter<_Bool> required, int __return__);
MockExpectedCall& hardware_alarm_claim_unused(unsigned int __numCalls__, CppUMockGen::Parameter<_Bool> required, int __return__);
}

namespace expect {
MockExpectedCall& hardware_alarm_set_target(CppUMockGen::Parameter<uint> alarm_num, CppUMockGen::Parameter<absolute_time_t&> t, _Bool __return__);
MockExpectedCall& hardware_alarm_set_target(unsigned int __numCalls__, CppUMockGen::Parameter<uint> alarm_num, CppUMockGen::Parameter<absolute_time_t&> t, _Bool __return__);
}

namespace expect {
MockExpectedCall& hardware_alarm_cancel(CppUMockGen::Parameter<uint> alarm_num);
MockExpectedCall& hardware_alarm_cancel(unsigned int __numCalls__, CppUMockGen::Parameter<uint> alarm_num);
}

namespace expect {
MockExpectedCall& hardware_alarm_force_irq(CppUMockGen::Parameter<uint> alarm_num);
MockExpectedCall& hardware_alarm_force_irq(unsigned int __numCalls__, CppUMockGen::Parameter<uint> alarm_num);
}

