/*
 * This file has been auto-generated by CppUMockGen v0.6.
 *
 * Contents will NOT be preserved if it is regenerated!!!
 */

#include "adc_expect.hpp"

namespace expect {
MockExpectedCall& adc_init()
{
    return adc_init(1);
}
MockExpectedCall& adc_init(unsigned int __numCalls__)
{
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "adc_init");
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& adc_gpio_init(CppUMockGen::Parameter<uint> gpio)
{
    return adc_gpio_init(1, gpio);
}
MockExpectedCall& adc_gpio_init(unsigned int __numCalls__, CppUMockGen::Parameter<uint> gpio)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "adc_gpio_init");
    if(gpio.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("gpio", gpio.getValue()); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& adc_select_input(CppUMockGen::Parameter<uint> input)
{
    return adc_select_input(1, input);
}
MockExpectedCall& adc_select_input(unsigned int __numCalls__, CppUMockGen::Parameter<uint> input)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "adc_select_input");
    if(input.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withUnsignedIntParameter("input", input.getValue()); }
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
}

namespace expect {
MockExpectedCall& adc_read(uint16_t __return__)
{
    return adc_read(1, __return__);
}
MockExpectedCall& adc_read(unsigned int __numCalls__, uint16_t __return__)
{
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "adc_read");
    __expectedCall__.andReturnValue(static_cast<unsigned int>(__return__));
    return __expectedCall__;
}
}

