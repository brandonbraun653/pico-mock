/*
 * This file has been auto-generated by CppUMockGen v0.6.
 *
 * Contents will NOT be preserved if it is regenerated!!!
 */

#include <CppUMockGen.hpp>

extern "C" {
#include "../include/hardware/spi.h"
}

#include <CppUTestExt/MockSupport.h>

namespace expect {
MockExpectedCall& spi_init(spi_inst_t * spi, CppUMockGen::Parameter<uint> baudrate, uint __return__);
MockExpectedCall& spi_init(unsigned int __numCalls__, spi_inst_t * spi, CppUMockGen::Parameter<uint> baudrate, uint __return__);
}

namespace expect {
MockExpectedCall& spi_deinit(spi_inst_t * spi);
MockExpectedCall& spi_deinit(unsigned int __numCalls__, spi_inst_t * spi);
}

namespace expect {
MockExpectedCall& spi_set_baudrate(spi_inst_t * spi, CppUMockGen::Parameter<uint> baudrate, uint __return__);
MockExpectedCall& spi_set_baudrate(unsigned int __numCalls__, spi_inst_t * spi, CppUMockGen::Parameter<uint> baudrate, uint __return__);
}

namespace expect {
MockExpectedCall& spi_get_baudrate(CppUMockGen::Parameter<const spi_inst_t *> spi, uint __return__);
MockExpectedCall& spi_get_baudrate(unsigned int __numCalls__, CppUMockGen::Parameter<const spi_inst_t *> spi, uint __return__);
}

namespace expect {
MockExpectedCall& spi_write_read_blocking(spi_inst_t * spi, CppUMockGen::Parameter<const uint8_t *> src, uint8_t * dst, size_t __sizeof_dst, CppUMockGen::Parameter<size_t> len, int __return__);
MockExpectedCall& spi_write_read_blocking(unsigned int __numCalls__, spi_inst_t * spi, CppUMockGen::Parameter<const uint8_t *> src, uint8_t * dst, size_t __sizeof_dst, CppUMockGen::Parameter<size_t> len, int __return__);
}

namespace expect {
MockExpectedCall& spi_write_blocking(spi_inst_t * spi, CppUMockGen::Parameter<const uint8_t *> src, CppUMockGen::Parameter<size_t> len, int __return__);
MockExpectedCall& spi_write_blocking(unsigned int __numCalls__, spi_inst_t * spi, CppUMockGen::Parameter<const uint8_t *> src, CppUMockGen::Parameter<size_t> len, int __return__);
}

namespace expect {
MockExpectedCall& spi_read_blocking(spi_inst_t * spi, CppUMockGen::Parameter<uint8_t> repeated_tx_data, uint8_t * dst, size_t __sizeof_dst, CppUMockGen::Parameter<size_t> len, int __return__);
MockExpectedCall& spi_read_blocking(unsigned int __numCalls__, spi_inst_t * spi, CppUMockGen::Parameter<uint8_t> repeated_tx_data, uint8_t * dst, size_t __sizeof_dst, CppUMockGen::Parameter<size_t> len, int __return__);
}

namespace expect {
MockExpectedCall& spi_write16_read16_blocking(spi_inst_t * spi, CppUMockGen::Parameter<const uint16_t *> src, uint16_t * dst, size_t __sizeof_dst, CppUMockGen::Parameter<size_t> len, int __return__);
MockExpectedCall& spi_write16_read16_blocking(unsigned int __numCalls__, spi_inst_t * spi, CppUMockGen::Parameter<const uint16_t *> src, uint16_t * dst, size_t __sizeof_dst, CppUMockGen::Parameter<size_t> len, int __return__);
}

namespace expect {
MockExpectedCall& spi_write16_blocking(spi_inst_t * spi, CppUMockGen::Parameter<const uint16_t *> src, CppUMockGen::Parameter<size_t> len, int __return__);
MockExpectedCall& spi_write16_blocking(unsigned int __numCalls__, spi_inst_t * spi, CppUMockGen::Parameter<const uint16_t *> src, CppUMockGen::Parameter<size_t> len, int __return__);
}

namespace expect {
MockExpectedCall& spi_read16_blocking(spi_inst_t * spi, CppUMockGen::Parameter<uint16_t> repeated_tx_data, uint16_t * dst, size_t __sizeof_dst, CppUMockGen::Parameter<size_t> len, int __return__);
MockExpectedCall& spi_read16_blocking(unsigned int __numCalls__, spi_inst_t * spi, CppUMockGen::Parameter<uint16_t> repeated_tx_data, uint16_t * dst, size_t __sizeof_dst, CppUMockGen::Parameter<size_t> len, int __return__);
}

