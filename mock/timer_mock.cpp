/*
 * This file has been auto-generated by CppUMockGen v0.6.
 *
 * Contents will NOT be preserved if it is regenerated!!!
 */

extern "C" {
#include "../include/hardware/timer.h"
}

#include <CppUTestExt/MockSupport.h>

uint32_t time_us_32()
{
    return static_cast<uint32_t>(mock().actualCall("time_us_32").returnUnsignedIntValue());
}

uint64_t time_us_64()
{
    return static_cast<uint64_t>(mock().actualCall("time_us_64").returnUnsignedLongIntValue());
}

void busy_wait_us_32(uint32_t delay_us)
{
    mock().actualCall("busy_wait_us_32").withUnsignedIntParameter("delay_us", delay_us);
}

void busy_wait_us(uint64_t delay_us)
{
    mock().actualCall("busy_wait_us").withUnsignedLongIntParameter("delay_us", delay_us);
}

void busy_wait_until(absolute_time_t t)
{
    mock().actualCall("busy_wait_until").withParameterOfType("absolute_time_t", "t", &t);
}

_Bool time_reached(absolute_time_t t)
{
    return mock().actualCall("time_reached").withParameterOfType("absolute_time_t", "t", &t).returnBoolValue();
}

void hardware_alarm_claim(uint alarm_num)
{
    mock().actualCall("hardware_alarm_claim").withUnsignedIntParameter("alarm_num", alarm_num);
}

void hardware_alarm_unclaim(uint alarm_num)
{
    mock().actualCall("hardware_alarm_unclaim").withUnsignedIntParameter("alarm_num", alarm_num);
}

int hardware_alarm_claim_unused(_Bool required)
{
    return mock().actualCall("hardware_alarm_claim_unused").withBoolParameter("required", required).returnIntValue();
}

_Bool hardware_alarm_set_target(uint alarm_num, absolute_time_t t)
{
    return mock().actualCall("hardware_alarm_set_target").withUnsignedIntParameter("alarm_num", alarm_num).withParameterOfType("absolute_time_t", "t", &t).returnBoolValue();
}

void hardware_alarm_cancel(uint alarm_num)
{
    mock().actualCall("hardware_alarm_cancel").withUnsignedIntParameter("alarm_num", alarm_num);
}

void hardware_alarm_force_irq(uint alarm_num)
{
    mock().actualCall("hardware_alarm_force_irq").withUnsignedIntParameter("alarm_num", alarm_num);
}

