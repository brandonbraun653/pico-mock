/*
 * This file has been auto-generated by CppUMockGen v0.6.
 *
 * Contents will NOT be preserved if it is regenerated!!!
 */

extern "C" {
#include "../include/hardware/pwm.h"
}

#include <CppUTestExt/MockSupport.h>

void pwm_set_irq_enabled(uint slice_num, _Bool enabled)
{
    mock().actualCall("pwm_set_irq_enabled").withUnsignedIntParameter("slice_num", slice_num).withBoolParameter("enabled", enabled);
}

void pwm_set_irq_mask_enabled(uint32_t slice_mask, _Bool enabled)
{
    mock().actualCall("pwm_set_irq_mask_enabled").withUnsignedIntParameter("slice_mask", slice_mask).withBoolParameter("enabled", enabled);
}

void pwm_clear_irq(uint slice_num)
{
    mock().actualCall("pwm_clear_irq").withUnsignedIntParameter("slice_num", slice_num);
}

uint32_t pwm_get_irq_status_mask()
{
    return static_cast<uint32_t>(mock().actualCall("pwm_get_irq_status_mask").returnUnsignedIntValue());
}

void pwm_force_irq(uint slice_num)
{
    mock().actualCall("pwm_force_irq").withUnsignedIntParameter("slice_num", slice_num);
}

uint pwm_get_dreq(uint slice_num)
{
    return static_cast<uint>(mock().actualCall("pwm_get_dreq").withUnsignedIntParameter("slice_num", slice_num).returnUnsignedIntValue());
}

