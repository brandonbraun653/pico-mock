/*
 * This file has been auto-generated by CppUMockGen v0.6.
 *
 * Contents will NOT be preserved if it is regenerated!!!
 */

extern "C" {
#include "../include/hardware/dma.h"
}

#include <CppUTestExt/MockSupport.h>

void dma_channel_claim(uint channel)
{
    mock().actualCall("dma_channel_claim").withUnsignedIntParameter("channel", channel);
}

void dma_claim_mask(uint32_t channel_mask)
{
    mock().actualCall("dma_claim_mask").withUnsignedIntParameter("channel_mask", channel_mask);
}

void dma_channel_unclaim(uint channel)
{
    mock().actualCall("dma_channel_unclaim").withUnsignedIntParameter("channel", channel);
}

void dma_unclaim_mask(uint32_t channel_mask)
{
    mock().actualCall("dma_unclaim_mask").withUnsignedIntParameter("channel_mask", channel_mask);
}

int dma_claim_unused_channel(_Bool required)
{
    return mock().actualCall("dma_claim_unused_channel").withBoolParameter("required", required).returnIntValue();
}

_Bool dma_channel_is_claimed(uint channel)
{
    return mock().actualCall("dma_channel_is_claimed").withUnsignedIntParameter("channel", channel).returnBoolValue();
}

void dma_timer_claim(uint timer)
{
    mock().actualCall("dma_timer_claim").withUnsignedIntParameter("timer", timer);
}

void dma_timer_unclaim(uint timer)
{
    mock().actualCall("dma_timer_unclaim").withUnsignedIntParameter("timer", timer);
}

int dma_claim_unused_timer(_Bool required)
{
    return mock().actualCall("dma_claim_unused_timer").withBoolParameter("required", required).returnIntValue();
}

_Bool dma_timer_is_claimed(uint timer)
{
    return mock().actualCall("dma_timer_is_claimed").withUnsignedIntParameter("timer", timer).returnBoolValue();
}

void dma_channel_cleanup(uint channel)
{
    mock().actualCall("dma_channel_cleanup").withUnsignedIntParameter("channel", channel);
}

