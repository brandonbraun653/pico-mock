/*
 * This file has been auto-generated by CppUMockGen v0.6.
 *
 * Contents will NOT be preserved if it is regenerated!!!
 */

extern "C" {
#include "../include/hardware/uart.h"
}

#include <CppUTestExt/MockSupport.h>

uint uart_init(uart_inst_t * uart, uint baudrate)
{
    return static_cast<uint>(mock().actualCall("uart_init").withOutputParameterOfType("uart_inst_t", "uart", uart).withUnsignedIntParameter("baudrate", baudrate).returnUnsignedIntValue());
}

void uart_deinit(uart_inst_t * uart)
{
    mock().actualCall("uart_deinit").withOutputParameterOfType("uart_inst_t", "uart", uart);
}

uint uart_set_baudrate(uart_inst_t * uart, uint baudrate)
{
    return static_cast<uint>(mock().actualCall("uart_set_baudrate").withOutputParameterOfType("uart_inst_t", "uart", uart).withUnsignedIntParameter("baudrate", baudrate).returnUnsignedIntValue());
}

void uart_set_hw_flow(uart_inst_t * uart, _Bool cts, _Bool rts)
{
    mock().actualCall("uart_set_hw_flow").withOutputParameterOfType("uart_inst_t", "uart", uart).withBoolParameter("cts", cts).withBoolParameter("rts", rts);
}

void uart_set_format(uart_inst_t * uart, uint data_bits, uint stop_bits, uart_parity_t parity)
{
    mock().actualCall("uart_set_format").withOutputParameterOfType("uart_inst_t", "uart", uart).withUnsignedIntParameter("data_bits", data_bits).withUnsignedIntParameter("stop_bits", stop_bits).withIntParameter("parity", static_cast<int>(parity));
}

void uart_set_irq_enables(uart_inst_t * uart, _Bool rx_has_data, _Bool tx_needs_data)
{
    mock().actualCall("uart_set_irq_enables").withOutputParameterOfType("uart_inst_t", "uart", uart).withBoolParameter("rx_has_data", rx_has_data).withBoolParameter("tx_needs_data", tx_needs_data);
}

size_t uart_is_writable(uart_inst_t * uart)
{
    return static_cast<size_t>(mock().actualCall("uart_is_writable").withOutputParameterOfType("uart_inst_t", "uart", uart).returnUnsignedLongIntValue());
}

size_t uart_is_readable(uart_inst_t * uart)
{
    return static_cast<size_t>(mock().actualCall("uart_is_readable").withOutputParameterOfType("uart_inst_t", "uart", uart).returnUnsignedLongIntValue());
}

void uart_write_blocking(uart_inst_t * uart, const uint8_t * src, size_t len)
{
    mock().actualCall("uart_write_blocking").withOutputParameterOfType("uart_inst_t", "uart", uart).withConstPointerParameter("src", src).withUnsignedLongIntParameter("len", len);
}

void uart_read_blocking(uart_inst_t * uart, uint8_t * dst, size_t len)
{
    mock().actualCall("uart_read_blocking").withOutputParameterOfType("uart_inst_t", "uart", uart).withOutputParameter("dst", dst).withUnsignedLongIntParameter("len", len);
}

void uart_putc(uart_inst_t * uart, char c)
{
    mock().actualCall("uart_putc").withOutputParameterOfType("uart_inst_t", "uart", uart).withIntParameter("c", c);
}

void uart_puts(uart_inst_t * uart, const char * s)
{
    mock().actualCall("uart_puts").withOutputParameterOfType("uart_inst_t", "uart", uart).withStringParameter("s", s);
}

char uart_getc(uart_inst_t * uart)
{
    return static_cast<char>(mock().actualCall("uart_getc").withOutputParameterOfType("uart_inst_t", "uart", uart).returnIntValue());
}

void uart_set_break(uart_inst_t * uart, _Bool en)
{
    mock().actualCall("uart_set_break").withOutputParameterOfType("uart_inst_t", "uart", uart).withBoolParameter("en", en);
}

void uart_default_tx_wait_blocking()
{
    mock().actualCall("uart_default_tx_wait_blocking");
}

